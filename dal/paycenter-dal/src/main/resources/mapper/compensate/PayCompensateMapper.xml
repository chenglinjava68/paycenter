<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qccr.paycenter.dal.mapper.compensate.PayCompensateMapper">

    <resultMap id="PayCompensateResultMap" type="com.qccr.paycenter.dal.domain.compensate.PayCompensateDO">
        <id column="id"  property="id" />
        <id column="compensate_no"  property="compensateNo" />
        <id column="pay_no"  property="payNo" />
        <id column="batch_no"  property="batchNo" />
        <id column="business_no"  property="businessNo" />
        <id column="business_type"  property="businessType" />
        <id column="status" property="status" />
        <id column="bill_no" property="billNo" />
        <id column="pay_channel" property="payChannel" />
        <id column="pay_type" property="payType" />
        <id column="mch_id" property="mchId" />
        <id column="payer_account" property="payerAccount" />
        <id column="amount" property="amount" />
        <id column="partner" property="partner" />
        <id column="source" property="source" />
        <id column="refund_bill_no" property="refundBillNo" />
        <id column="refund_time" property="refundTime" />
        <id column="success_time" property="successTime" />
        <id column="compensate_type" property="compensateType" />
        <id column="create_time" property="createTime" />
        <id column="update_time" property="updateTime" />
        <id column="create_person" property="createPerson" />
        <id column="update_person" property="updatePerson" />
    </resultMap>

    <sql id="Pay_Compensate_Column_List">
        id,compensate_no, pay_no, business_no, business_type, status,amount,bill_no,pay_channel,pay_type,batch_no
        ,mch_id,payer_account,partner,source,refund_bill_no,refund_time,success_time,compensate_type,create_time, update_time,create_person, update_person
    </sql>


    <sql id="compensateQueryConditions">
        WHERE
        <if test="status!=null">
              status = #{status}
        </if>

        <if test="payChannel!=null">
            and pay_channel = #{payChannel}
        </if>

        <if test="fromTime!=null" >
            and create_time<![CDATA[ >= ]]>#{fromTime}
            <!--and SUBSTRING_INDEX(cp.create_time,'~',1) &gt;= #{formTime}-->
       </if>

       <if test="endTime!=null" >
           and create_time <![CDATA[ <= ]]>#{endTime}
           <!--and SUBSTRING_INDEX(cp.create_time,'~',-1) &gt;= #{endTime}-->
        </if>

    </sql>

    <insert id="insert" parameterType="com.qccr.paycenter.dal.domain.compensate.PayCompensateDO">

        insert into pay_compensate(compensate_no,pay_no,batch_no, business_no, business_type, status,amount,bill_no,pay_channel,pay_type
        ,mch_id,payer_account,partner,source,refund_bill_no,refund_time,compensate_type,create_time,update_time) values(#{compensateNo},#{payNo},#{batchNo}, #{businessNo},#{businessType},#{status},
        #{amount},#{billNo},#{payChannel},#{payType},#{mchId},#{payerAccount},#{partner},
        #{source},#{refundBillNo},#{refundTime},#{compensateType},now(),now())

    </insert>


    <select id="findByPayNoAndChannel"  resultMap="PayCompensateResultMap">
        select
        <include refid="Pay_Compensate_Column_List" />
        from pay_compensate
        where pay_no=#{payNo} and channel=#{channel} limit 1
    </select>

    <select id="findPayCompensateCount" resultType="int">

        select count(*) from pay_compensate <include refid="compensateQueryConditions" />

    </select>

    <select id="findPayCompensateList" resultMap="PayCompensateResultMap">
        select <include refid="Pay_Compensate_Column_List" />
        from pay_compensate
        <include refid="compensateQueryConditions" />
        limit #{startRow},#{pageSize}
    </select>

    <select id="findBycompensateNo"  resultMap="PayCompensateResultMap">
        select
        <include refid="Pay_Compensate_Column_List" />
        from pay_compensate
        where compensate_no=#{compensateNo} limit 1
    </select>

    <update id="refundUpdate" parameterType="java.util.Map" >
        update pay_compensate set source=#{source},refund_time=now(),status=#{status},refund_bill_no=#{refundBillNo},update_time=now()
        where compensate_no=#{compensateNo} and status in(0,4,6)
    </update>

    <update id="refundSuccess" >
         update pay_compensate set source=#{source},status=1,refund_bill_no=#{refundBillNo},success_time=#{successTime},update_time=now()
        where compensate_no=#{compensateNo} and status in(0,2,4,6)
    </update>

    <update id="refundAsyncMerge" parameterType="java.util.Map" >
        update pay_compensate set status=#{status},refund_bill_no=#{refundBillNo},update_time=now() where compensate_no=#{compensateNo} and status = 0
    </update>

    <update id="refundFail">
        update pay_compensate set status=2,refund_bill_no=#{refundBillNo},update_time=now() where compensate_no=#{compensateNo} and status in(0,4,6)

    </update>

    <select id="existsPayNo" resultType="string">
        select pay_no from pay_compensate where pay_no=#{payNo} and pay_channel=#{payChannel}
    </select>

    <select id="queryTimingInThreeDays" resultMap="PayCompensateResultMap">
        select * from pay_compensate  where create_time  <![CDATA[ >= ]]> date_add(curdate(), interval -3 day) and create_time <![CDATA[ <= ]]> now()
        and status in(4,6) and amount <![CDATA[ >= ]]> #{minAmount} and amount <![CDATA[ <= ]]> #{maxAmount}
    </select>

    <!--<select id="findByBatchNo" resultMap="PayCompensateResultMap" parameterType="string">-->

        <!--select * from  pay_compensate where  batch_no = #{batchNo} limit 1-->

    <!--</select>-->
    
    <update id="setSourceAndRefundTime">
        update pay_compensate set source=#{source},refund_time=now(),update_time=now() where compensate_no = #{compensateNo}
    </update>

    <update id="refundMerge">
        update pay_compensate set refund_bill_no=#{refundBillNo},status=#{status},success_time=now(),update_time=now() where compensate_no = #{compensateNo}
        and status in
        <foreach collection="statusList" item="item" index="index" open="("
                               separator="," close=")">
                            #{item}
        </foreach>
    </update>
    
    <select id="queryTimingInDaysBySharding" resultMap="PayCompensateResultMap">
        select * from pay_compensate  where create_time  <![CDATA[ >= ]]> date_add(curdate(), interval -#{days} day) and create_time <![CDATA[ <= ]]> now()
        and status in(4,6) and amount <![CDATA[ >= ]]> #{minAmount} and amount <![CDATA[ <= ]]> #{maxAmount} and mod(id, #{shardingNum}) in
		<foreach collection="shardingList" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
    </select>

    <select id="findPayCompensateListByBizNo" resultMap="PayCompensateResultMap">
        select * from  pay_compensate where business_no=#{bizNo}
    </select>

    <select id="findPayCompensateByBillNo" resultMap="PayCompensateResultMap">
        select * from pay_compensate where bill_no=#{billNo}
    </select>

</mapper>